{"name":"Moajs","tagline":"Implementation object inheritance, static methods and properties, mixins in JavaScript","body":"![MoaJs](https://raw.github.com/Pencroff/MoaJs/master/extras/moa-logo-web.png \"MoaJs\") MoaJs \r\n=====\r\n\r\nExtJs syntax for declaration object inheritance, mixins, static methods / properties / mixins, singleton declaration out of the box and near 2kB minified JavaScript code and 1kB gzip. You can see **current** version MoaJs in root and **release** version in `release` folder.\r\n\r\n## Documentation ##\r\n\r\n- **MoaJs API**\r\n\t\t\r\n\t- `define` - declare new object type / get constructor by type name\r\n\t- `mixin` - declare new mixin type\r\n\t- `getType()` - predefined exemplar method, which return declared type name  \r\n\t- `getRegistry()` - return object with arrays of types and mixins\r\n\t```javascript\r\n\t{\r\n\t\ttype: ['base', 'child'],\r\n\t\tmixin: ['numMix', 'strMix']\r\n\t}\r\n\t```\r\n\r\n- **Object declaration**\r\n\r\nDeclaration without `$base` closure\r\n```javascript\r\n\t// Moa.define($name, $object)\r\n\t// $name - type name\r\n\t// $object - object with declaration fields and methods\r\n\t// $ctor - object constructor \r\n\tvar constructor = Moa.define('baseObj', {\r\n\t\t$ctor: function (name) {\r\n            this.name = name;\r\n        },\r\n\t\tgetName: function() {\r\n\t\t\treturn this.name;\r\n\t\t}\r\n\t});\r\n```\r\nDeclaration inheritance and `$base` closure\r\n```javascript\r\n\t// Moa.define($name, $function)\r\n\t// $name - type name\r\n\t// $function - function with declaration fields and methods,\r\n\t//\t\t\t\thas $base parameter, for parrent implementation\r\n\tvar constructor = Moa.define('child', function ($base) {\r\n\t\t// $base - containe reference to 'baseObj'\r\n        return {\r\n            $extend: 'baseObj',\r\n            $ctor: function (name, age) {\r\n                this.age = age;\r\n                $base.$ctor.call(this, name);\r\n            },\r\n            getAge: function () {\r\n                return this.age;\r\n            }\r\n        };\r\n\t});\r\n```\r\nDelete declaration\r\n```javascript\r\n\tMoa.define('base', {}); \t// new type declaration\r\n\tMoa.define('base', null); \t// delete type declaration\r\n```\r\n\r\n- **`$base` closure**\r\n\r\nDeclaration\r\n```javascript\r\n\tvar childItem,\r\n\t\tbase = Moa.define('base', function ($base) {\r\n\t\t\t// $base - undefined\r\n\t\t\treturn {\r\n\t\t\t\t$ctor: function (name) {\r\n\t\t            this.name = name;\r\n\t\t        },\r\n\t\t\t\tgetName: function() {\r\n\t\t\t\t\treturn this.name;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}),\r\n\t\tchild = Moa.define('child', function ($base) {\r\n\t\t\t// $base - reference to 'base' type\r\n\t        return {\r\n\t            $extend: 'base',\r\n\t            $ctor: function (name, age) {\r\n\t                this.age = age;\r\n\t                $base.$ctor.call(this, name);\r\n\t            },\r\n\t\t\t\t// override base implementation\r\n\t\t\t\tgetName: function() {\r\n\t\t\t\t\treturn 'Child: ' + $base.getName.call(this);\r\n\t\t\t\t},\r\n\t            getAge: function () {\r\n\t                return this.age;\r\n\t            }\r\n\t\t\t};\r\n        });\r\n```\r\nUsing\r\n```\r\n\tchildItem = new child('Pet', 7);\r\n\tchildItem.getName(); // 'Child: Pet'\r\n\tchildItem.getAge();  // 7\r\n```\r\n\r\n- **Mixins**\r\n\r\nDeclaration mixins\r\n```javascript\r\n\tvar BaseConstructor, item,\r\n\t\tnumMix = function () {\r\n            this.add = function () {\r\n                return (this.a + this.b);\r\n            };\r\n        },\r\n        strMix = function () {\r\n            this.add = function () {\r\n                return (this.a.toString() + this.b.toString());\r\n            };\r\n        },\r\n\t\tbase = {\r\n            $ctor: function (a, b) {\r\n                this.a = a;\r\n                this.b = b;\r\n            },\r\n            $mixin: {\r\n                num: 'numMix',\r\n                str: 'strMix'\r\n            }\r\n        };\r\n\tMoa.mixin('numMix', numMix);\r\n\t//Moa.mixin('numMix', null); // Delete mixin declaration\r\n    Moa.mixin('strMix', strMix);\r\n\tMoa.define('base', base);\r\n```\r\nUsing mixins\r\n```javascript\r\n\tBaseConstructor = Moa.define('base');\r\n\titem = new BaseConstructor(10, 12);\r\n\titem.add(); // '1012' - last 'str' mixin override 'num' mixin\r\n\t// but you already use it\r\n\titem.num.add.call(item); // 22\r\n\titem.str.add.call(item); // '1012' \r\n```\r\nDelete declaration\r\n```javascript\r\n\tMoa.mixin('mix', function () {}); \t// new mixin declaration\r\n\tMoa.mixin('mix', null); \t\t\t// delete mixin declaration\r\n```\r\n\r\n- **Static methods and mixin declaration**\r\n\r\nDeclaration\r\n```javascript\r\nvar baseCtor, item,\r\n    strMix = function () {\r\n        this.add = function () {\r\n            return (this.a.toString() + this.b.toString());\r\n        };\r\n    }\r\n\tbase = {\r\n        $ctor: function () {\r\n        },\r\n        $static: {\r\n\t\t\t// Also you can declare static mixins in usual way\r\n\t\t\t$mixin: {\r\n                str: 'strMix'\r\n            },\r\n            getMsg: function () {\r\n                return 'Static!';\r\n            },\r\n            a: 15,\r\n\t\t\tb: 17\r\n        }\r\n    };\r\nMoa.mixin('strMix', strMix);\r\nMoa.define('base', base);\r\n```\r\nUsing\r\n```javascript\r\n\tbaseCtor = Moa.define('base');\r\n\tbaseCtor.getMsg(); // 'Static!' - static method\r\n\tbaseCtor.add(); // '15' + '17' => '1517' - static mixin\r\n\tCtor.str.add.call(Ctor); // '1517'\r\n```\r\n\r\n- **Singleton**\r\n\r\nDeclaration\r\n```javascript\r\nvar itemA, itemB, ItemC,\r\n\tsingeltonConstructor = Moa.define('singleExample', {\r\n\t$single: true,\r\n\t$ctor: function () {\r\n        this.name = 'Moa';\r\n    },\r\n    getName: function () {\r\n        return this.name;\r\n    }\r\n})\r\n```\r\nUsing\r\n```javascript\r\n\t// Unfortunately it can not have constructor parameters\r\n\titemA = new singeltonConstructor();\r\n\titemB = singeltonConstructor();\r\n\titemC = singeltonConstructor.getInstance();\r\n\t// itemA equal itemB equal itemC\r\n```\r\n## Items ##\r\n\r\n### Mixins ###\r\n\r\n- **Randomise mixin**\r\n\t- rnd from 0 to range\r\n\t- rnd in range min - max\r\n- **Search mixin**\r\n\t- linear search (equal, less, greater)\r\n\t- binary search (equal, greater)\r\n- **Sort mixin**\r\n\t- swap elements\r\n\t- qsort\r\n\t- comb sort\r\n\t- gnome sort\r\n\t- shaker sort\r\n\t- insert sort\r\n\t- binary insert sort\r\n\t- merge sort\r\n\t- hybrid merge sort with insert sort\r\n\t- one array merge sort\r\n\t- selection sort\r\n- **Throw Error mixin**\r\n\r\n\t*Generate error if not right condition*\r\n\r\n\t- undefined error\r\n\t- indexOf error\r\n\t- notInRange error\r\n\t- notInstanceOf error\r\n\t- notObj error\r\n\t- notFn error\r\n\t- notStr error\r\n\t- notEqual error\r\n\r\n## Changelog ##\r\n\r\nMoaJs v0.1.3 - in process\r\n\r\n- IoC implementation\r\n- delete mixins `Moa.mixixn('mix', null)`\r\n\r\nMoaJs v0.1.2\r\n\r\n- `getRegistry` - list available types and mixins\r\n- Set up release process (version, minification, compression) and save result to `release` folder\r\n\r\nMoaJs v0.1.1\r\n\r\n- rindomise mixin\r\n- search mixin\r\n- sort mixin\r\n- throw error mixin\r\n- [grunt-benchmark](https://www.npmjs.org/package/grunt-benchmark) for testing performance\r\n\r\nMoaJs v0.1.0\r\n\r\n- declare object in ExtJs syntax and get it by type name\r\n- object inheritance with $extend by type name\r\n- using $base closure for executin parent constructor or methods\r\n- static methods\r\n- simple 'singleton' declaration\r\n- mixins\r\n- static mixins\r\n- support client side (AMD / direct reference)\r\n- support CommonJs declaration\r\n\r\n## Performance ##\r\n\r\n[Link to jsperf.com](http://jsperf.com/moo-resig-ender-my/31)\r\n\r\n## Sources of inspirations ##\r\n\r\n- [JavaScript Override Patterns](http://webreflection.blogspot.ie/2010/02/javascript-override-patterns.html \"JavaScript Override Patterns\")\r\n- [my.class.js](http://jiem.github.io/my-class/ \"my.class.js\")\r\n- [Objs](https://github.com/tekool/objs/ \"Objs\")\r\n- [A fresh look at JavaScript Mixins](http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/ \"A fresh look at JavaScript Mixins\")\r\n\r\n## License ##\r\nCopyright Â© 2013-2014 Sergii Danilov, [pencroff.com](http://pencroff.com \"pencroff.com\")\r\n\r\nMoaJs may be freely distributed under the MIT license.\r\n\r\n___\r\n\r\n**Feel free to contact me should you require any futher information.**\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}